<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:soap="http://cxf.apache.org/bindings/soap"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  				http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
				http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
				http://cxf.apache.org/bindings/soap http://cxf.apache.org/schemas/configuration/soap.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />

	<cxf:cxfEndpoint id="Device" address="/Device" serviceClass="org.onvif.ver10.device.wsdl.Device">
		<cxf:binding> 
			<soap:soapBinding mtomEnabled="true" version="1.2"/> 
		</cxf:binding> 
	</cxf:cxfEndpoint>

	<cxf:cxfEndpoint id="ReplayPort" address="/ReplayPort" serviceClass="org.onvif.ver10.replay.wsdl.ReplayPort">
		<cxf:binding> 
			<soap:soapBinding mtomEnabled="true" version="1.2"/> 
		</cxf:binding> 
	</cxf:cxfEndpoint>

	<cxf:cxfEndpoint id="RecordingPort" address="/RecordingPort" serviceClass="org.onvif.ver10.recording.wsdl.RecordingPort">
		<cxf:binding> 
			<soap:soapBinding mtomEnabled="true" version="1.2"/> 
		</cxf:binding> 
	</cxf:cxfEndpoint>

	<cxf:cxfEndpoint id="PullPointSubscription" address="/PullPointSubscription" serviceClass="org.onvif.ver10.events.wsdl.PullPointSubscription">
		<cxf:binding> 
			<soap:soapBinding mtomEnabled="true" version="1.2"/> 
		</cxf:binding> 
	</cxf:cxfEndpoint>

	<cxf:cxfEndpoint id="EventPortType" address="/EventPortType" serviceClass="org.onvif.ver10.events.wsdl.EventPortType">
		<cxf:binding> 
			<soap:soapBinding mtomEnabled="true" version="1.2"/> 
		</cxf:binding> 
	</cxf:cxfEndpoint>

	<cxf:cxfEndpoint id="PTZ" address="/PTZ" serviceClass="org.onvif.ver20.ptz.wsdl.PTZ">
		<cxf:binding> 
			<soap:soapBinding mtomEnabled="true" version="1.2"/> 
		</cxf:binding> 
	</cxf:cxfEndpoint>

	<camelContext id="camelProcess" xmlns="http://camel.apache.org/schema/spring" useMDCLogging="true">
		<!--  log -->
		<intercept>
			<to uri="log:interceptor?showHeaders=true&amp;level=INFO" />
		</intercept>
		
		<!--  test -->
		<route>
			<from uri="servlet:///hello" />
			<setBody>
				<constant>Hello</constant>
			</setBody>
		</route>
		<route>
			<from uri="servlet:///probe" />
			<setBody>
				<groovy>
					request = new org.apache.cxf.ws.discovery.wsdl.GetClient();
					request;
				</groovy>
			</setBody>
			<to uri="cxf:/discovery?serviceClass=org.apache.cxf.ws.discovery.WSDiscoveryClient&amp;loggingFeatureEnabled=true&amp;dataFormat=PAYLOAD"/>
		</route>

		<!-- devicemgmt.wsdl -->
		<route>
			<from uri="cxf:bean:Device?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=true" />
			<choice>
				<when>
					<simple>${header.operationName} == 'GetCapabilities'</simple>
					<to uri="seda:GetCapabilities"/>
				</when>
				<when>
					<simple>${header.operationName} == 'GetDeviceInformation'</simple>
					<to uri="seda:GetDeviceInformation"/>
				</when>
				<otherwise>
					<setFaultBody>
						<simple>SOAP_FAULT</simple>
					</setFaultBody>
				</otherwise>
			</choice>
		</route>
		<route>
			<from uri="seda:GetCapabilities" />
			<setBody>
				<groovy>
					deviceCapability = new org.onvif.ver10.schema.DeviceCapabilities();
					deviceCapability.setXAddr("http://a.b.c.d/device");
					eventCapability = new org.onvif.ver10.schema.EventCapabilities()
					eventCapability.setXAddr("http://a.b.c.d/events");
					ptzCapability = new org.onvif.ver10.schema.PTZCapabilities()
					ptzCapability.setXAddr("http://a.b.c.d/ptz");	
					recordingCapability = new org.onvif.ver10.schema.RecordingCapabilities()					
					recordingCapability.setXAddr("http://a.b.c.d/recording");	
					extCapability = new org.onvif.ver10.schema.CapabilitiesExtension();
					extCapability.setRecording(recordingCapability);
					
					capabilities =  new org.onvif.ver10.schema.Capabilities();
					capabilities.setDevice(deviceCapability);
					capabilities.setEvents(eventCapability);
					capabilities.setPTZ(ptzCapability);
					capabilities.setExtension(extCapability);
					
					response = new org.onvif.ver10.device.wsdl.GetCapabilitiesResponse();
					response.setCapabilities(capabilities);
					response;
				</groovy>
			</setBody>
		</route>
		<route>
			<from uri="seda:GetDeviceInformation" />
			<setBody>
				<groovy>
					response = new org.onvif.ver10.device.wsdl.GetDeviceInformationResponse();
					response.setManufacturer("Manufacturer");
					response.setModel("Model");
					response.setFirmwareVersion("FirmwareVersion");
					response.setSerialNumber("SerialNumber");
					response.setHardwareId("HardwareId");
					response;
				</groovy>
			</setBody>
		</route>

		<!--  replay.wsdl -->
		<route>
			<from uri="cxf:bean:ReplayPort?dataFormat=PAYLOAD" />
			<choice>
				<when>
					<simple>${header.operationName} == 'GetReplayUri'</simple>
					<to uri="seda:GetReplayUri"/>
				</when>
				<otherwise>
					<setFaultBody>
						<simple>SOAP_FAULT</simple>
					</setFaultBody>
				</otherwise>
			</choice>
		</route>
		<route>
			<from uri="seda:GetReplayUri" />			
			<setBody>
				<groovy>
					response = new org.onvif.ver10.replay.wsdl.GetReplayUriResponse();
					response.setUri("rtsp://x.y.y.z/replay");
					response;
				</groovy>
			</setBody>
		</route>

		<!--  recording.wsdl -->
		<route>
			<from uri="cxf:bean:RecordingPort?dataFormat=PAYLOAD" />
			<choice>
				<when>
					<simple>${header.operationName} == 'GetServiceCapabilities'</simple>
					<to uri="seda:GetServiceCapabilities"/>
				</when>
				<otherwise>
					<setFaultBody>
						<simple>SOAP_FAULT</simple>
					</setFaultBody>
				</otherwise>
			</choice>
		</route>
		<route>
			<from uri="seda:GetServiceCapabilities" />			
			<setBody>
				<groovy>
					response = new org.onvif.ver10.recording.wsdl.GetServiceCapabilitiesResponse();
					response;
				</groovy>
			</setBody>
		</route>

		<!--  event.wsdl -->
		<route>
			<from uri="cxf:bean:PullPointSubscription?dataFormat=PAYLOAD" />
			<choice>
				<when>
					<simple>${header.operationName} == 'PullMessages'</simple>
					<to uri="seda:PullMessages"/>
				</when>
				<otherwise>
					<setFaultBody>
						<simple>SOAP_FAULT</simple>
					</setFaultBody>
				</otherwise>
			</choice>
		</route>
		<route>
			<from uri="seda:PullMessages" />
			<setBody>
				<groovy>
					elt = new javax.xml.bind.JAXBElement&lt;String&gt;(new javax.xml.namespace.QName("url","tag"),String.class, "message");
					
					message = new org.oasis_open.docs.wsn.b_2.NotificationMessageHolderType.Message();
					message.setAny(elt);

					notification = new org.oasis_open.docs.wsn.b_2.NotificationMessageHolderType();
					notification.setMessage(message);

					response = new org.onvif.ver10.events.wsdl.PullMessagesResponse();
					response.getNotificationMessage().add(notification);
					response;
				</groovy>
			</setBody>
		</route>
		<route>
			<from uri="cxf:bean:EventPortType?dataFormat=PAYLOAD" />
			<setFaultBody>
				<simple>SOAP_FAULT</simple>
			</setFaultBody>
		</route>

		<!--  ptz.wsdl -->
		<route>
			<from uri="cxf:bean:PTZ?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=true" />
			<choice>
				<when>
					<simple>${header.operationName} == 'GetConfigurations'</simple>
					<to uri="seda:GetConfigurations"/>
				</when>
				<otherwise>
					<setFaultBody>
						<simple>SOAP_FAULT</simple>
					</setFaultBody>
				</otherwise>
			</choice>
		</route>
		<route>
			<from uri="seda:GetConfigurations" />
			<setBody>
				<groovy>
					response = new org.onvif.ver20.ptz.wsdl.GetConfigurationsResponse();
					response;
				</groovy>
			</setBody>
		</route>

		<!--  discovery -->
		<route>
			<from uri="cxf:/discovery?serviceClass=org.apache.cxf.ws.discovery.WSDiscoveryService&amp;loggingFeatureEnabled=true&amp;dataFormat=PAYLOAD"/>
			<to uri="log:discovery"/>
		</route>


	</camelContext>

</beans>